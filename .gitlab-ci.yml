stages:
  - build_push
  - update
  - k8s_deploy
  - release

variables:
  SERVICE_NAME: dev_frontend
  IMAGE_TAG: dev_${CI_PIPELINE_IID}
  FULL_IMAGE: $CI_REGISTRY_IMAGE/test_kode:$IMAGE_TAG
  KUBE_NAMESPACE: default

build_and_push:
  stage: build_push
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
  script: |
    IMAGE_NAME="$CI_REGISTRY_IMAGE/test_kode"
    IMAGE_TAG="$IMAGE_TAG"
    FULL_IMAGE="$FULL_IMAGE"

    echo "DEBUG: IMAGE_NAME=[${IMAGE_NAME}]"
    echo "DEBUG: IMAGE_TAG=[${IMAGE_TAG}]"
    echo "DEBUG: FULL_IMAGE=[${FULL_IMAGE}]"

    echo "BUILDING IMAGE: ${FULL_IMAGE}"
    docker build -t "${FULL_IMAGE}" .
    echo "BUILD COMPLETED."

    echo "Checking built image:"
    docker images | grep "${IMAGE_NAME}"
    echo "Logging into GitLab Container Registry..."
    echo "$CI_JOB_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    echo "PUSHING IMAGE TO REGISTRY: ${FULL_IMAGE}"
    docker push "${FULL_IMAGE}"
    echo "PUSH COMPLETED."

    echo "FULL_IMAGE=${FULL_IMAGE}" >> build_vars.env
    echo "IMAGE_TAG=${IMAGE_TAG}" >> build_vars.env
  artifacts:
    reports:
      dotenv: build_vars.env
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "test"

update:
  stage: update
  tags:
    - local
  before_script:
    - echo "Checking Docker availability..."
    - docker --version
    - docker info
  script: |
    echo "FULL_IMAGE: $FULL_IMAGE"

    echo "Logging into GitLab Container Registry..."
    echo "$CI_JOB_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"

    echo "Pulling image from registry: ${FULL_IMAGE}"
    docker pull "${FULL_IMAGE}" || echo "Image pull failed, but continuing..."

    echo "Current images:"
    docker images | grep -E "(test_kode|dev_)"

    echo "Updating Docker service with image: ${FULL_IMAGE}"
    docker service update --with-registry-auth --image "${FULL_IMAGE}" "$SERVICE_NAME"

    echo "Service update completed successfully!"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "test"
  dependencies:
    - build_and_push

k8s_deploy:
  stage: k8s_deploy
  image:
    name: alpine/helm:3.14.0
    entrypoint: [""]
  before_script:
    - echo "Setting up kubectl context..."
    - echo "KUBE_NAMESPACE: $KUBE_NAMESPACE"
    - echo "IMAGE_TAG: $IMAGE_TAG"
  script:
    - echo "Main branch için Kubernetes + Helm deploy başlatılıyor..."
    - helm upgrade --install my-app ./helm-chart \
        --namespace "$KUBE_NAMESPACE" \
        --set image.repository="$CI_REGISTRY_IMAGE/test_kode" \
        --set image.tag="$IMAGE_TAG" \
        --set namespace="$KUBE_NAMESPACE"
    - helm status my-app --namespace "$KUBE_NAMESPACE"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  dependencies:
    - build_and_push

release:
  stage: release
  image: alpine:latest
  before_script:
    - apk add --no-cache git curl
    - git config --global user.email "ci-bot@example.com"
    - git config --global user.name "CI Bot"
  script: |
    TAG_NAME="dev_${CI_PIPELINE_IID}"
    git tag "$TAG_NAME"
    git push "https://oauth2:${CI_JOB_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" "$TAG_NAME"
    curl --request POST --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
      --data "name=Release $TAG_NAME" \
      --data "tag_name=$TAG_NAME" \
      --data "description=Automated release from pipeline $CI_PIPELINE_ID" \
      "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/releases"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  dependencies:
    - update
    - k8s_deploy