stages:
  - build_push
  - update

variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE/test_kode
  IMAGE_TAG: dev_${CI_PIPELINE_ID}
  FULL_IMAGE: "${IMAGE_NAME}:${IMAGE_TAG}"
  SERVICE_NAME: dev_frontend

build_and_push:
  stage: build_push
  image: docker:latest
  services:
    - docker:dind
  script:
    - |
      echo "BUILDING IMAGE: ${FULL_IMAGE}"
      docker build -t "${FULL_IMAGE}" .
      echo "BUILD COMPLETED."

      echo "Logging into GitLab Container Registry..."
      echo "$CI_JOB_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
      echo "PUSHING IMAGE TO REGISTRY: ${FULL_IMAGE}"
      docker push "${FULL_IMAGE}"
      echo "PUSH COMPLETED."
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

update:
  stage: update
  image: alpine:latest
  before_script:
  - echo "Starting before_script"
  - apk add --no-cache openssh docker-cli
  - mkdir -p ~/.ssh
  - echo "$SSH_PRIVATE_KEY"
  - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - ssh-keyscan -H "$DEPLOY_SERVER" >> ~/.ssh/known_hosts
  - echo "before_script done"
  script:
    - |
      echo "Logging into GitLab Container Registry on remote server..."
      ssh -o StrictHostKeyChecking=no "$DEPLOY_USER@$DEPLOY_SERVER" "echo SSH connection successful"
      ssh -o StrictHostKeyChecking=no "$DEPLOY_USER@$DEPLOY_SERVER" "
        echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY && \
        docker service update --with-registry-auth --image $FULL_IMAGE $SERVICE_NAME"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  dependencies:
    - build_and_push
    
